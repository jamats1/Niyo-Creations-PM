// Industry-focused Project Management Schema
// Optimized for IT Agency, Construction Firm, and Interior Design

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(cuid())
  email          String   @unique
  name           String
  role           Role
  avatarUrl      String?
  teams          TeamMember[]
  tasks          Task[]        @relation("AssignedTasks")
  notifications  Notification[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@map("users")
}

enum Role {
  ADMIN
  MEMBER
  CLIENT
}

model Team {
  id        String        @id @default(cuid())
  name      String
  members   TeamMember[]
  projects  Project[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@map("teams")
}

model TeamMember {
  id      String   @id @default(cuid())
  userId  String
  teamId  String
  role    Role
  user    User     @relation(fields: [userId], references: [id])
  team    Team     @relation(fields: [teamId], references: [id])

  @@unique([userId, teamId])
  @@map("team_members")
}

model Project {
  id          String     @id @default(cuid())
  title       String
  description String?
  type        ProjectType
  status      ProjectStatus
  budget      Float      @default(0)  // Project budget/value
  teamId      String
  clientId    String?
  deadline    DateTime?
  tasks       Task[]
  documents   Document[]
  team        Team       @relation(fields: [teamId], references: [id])
  client      Client?    @relation(fields: [clientId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("projects")
}

enum ProjectType {
  IT
  CONSTRUCTION
  INTERIOR_DESIGN
}

enum ProjectStatus {
  DRAFT
  PLANNING
  EXECUTING
  REVIEW
  COMPLETED
  ON_HOLD
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus
  priority    TaskPriority
  dueDate     DateTime?
  assignedTo  String?
  projectId   String
  assignee    User?      @relation("AssignedTasks", fields: [assignedTo], references: [id])
  project     Project    @relation(fields: [projectId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("tasks")
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  DONE
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

model Client {
  id          String     @id @default(cuid())
  name        String
  email       String?
  phone       String?
  company     String?
  notes       String?
  projects    Project[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("clients")
}

model Document {
  id         String    @id @default(cuid())
  name       String
  url        String
  projectId  String
  project    Project   @relation(fields: [projectId], references: [id])
  uploadedAt DateTime  @default(now())

  @@map("documents")
}

model Notification {
  id         String             @id @default(cuid())
  userId     String
  type       NotificationType
  title      String
  message    String
  read       Boolean            @default(false)
  entityId   String?            // Reference to task, project, etc.
  entityType String?            // "task", "project", "client", etc.
  user       User               @relation(fields: [userId], references: [id])
  createdAt  DateTime           @default(now())

  @@map("notifications")
}

enum NotificationType {
  TASK_ASSIGNED
  TASK_COMPLETED
  TASK_OVERDUE
  PROJECT_DEADLINE
  PROJECT_STATUS_CHANGED
  COMMENT_ADDED
  CLIENT_ADDED
  DOCUMENT_UPLOADED
}

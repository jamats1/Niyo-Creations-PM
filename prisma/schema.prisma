// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  role      UserRole @default(USER)
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  assignedTasks    Task[]     @relation("TaskAssignee")
  createdTasks     Task[]     @relation("TaskCreator")
  createdProjects  Project[]  @relation("ProjectCreator")
  projectMembers   ProjectMember[]
  comments         Comment[]
  activities       Activity[]

  @@map("users")
}

model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  status      ProjectStatus @default(PLANNING)
  priority    Priority      @default(MEDIUM)
  startDate   DateTime?
  endDate     DateTime?
  budget      Float?
  categories  String?       // JSON string of category array
  tags        String?       // JSON string of tag array
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  creatorId   String
  creator     User          @relation("ProjectCreator", fields: [creatorId], references: [id])
  members     ProjectMember[]
  tasks       Task[]
  clients     ProjectClient[]
  comments    Comment[]
  activities  Activity[]

  @@map("projects")
}

model ProjectMember {
  id        String   @id @default(cuid())
  role      String   @default("member") // "owner", "admin", "member", "viewer"
  joinedAt  DateTime @default(now())

  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@map("project_members")
}

model Client {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  phone       String?
  company     String?
  address     Address?
  notes       String?
  status      ClientStatus @default(ACTIVE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  projects    ProjectClient[]
  comments    Comment[]
  activities  Activity[]

  @@map("clients")
}

model ProjectClient {
  id        String   @id @default(cuid())
  role      String   @default("client") // "client", "stakeholder", "sponsor"
  joinedAt  DateTime @default(now())

  // Relations
  clientId   String
  client     Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  projectId  String
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([clientId, projectId])
  @@map("project_clients")
}

model Task {
  id          String   @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)
  priority    Priority   @default(MEDIUM)
  dueDate     DateTime?
  estimatedHours Float?
  actualHours   Float?
  tags        String?     // JSON string of tag array
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  projectId   String
  project     Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assigneeId  String?
  assignee    User?       @relation("TaskAssignee", fields: [assigneeId], references: [id])
  creatorId   String
  creator     User        @relation("TaskCreator", fields: [creatorId], references: [id])
  comments    Comment[]
  attachments Attachment[]
  activities  Activity[]

  @@map("tasks")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  authorId   String
  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  taskId     String?
  task       Task?    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  projectId  String?
  project    Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  clientId   String?
  client     Client?  @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Attachment {
  id        String   @id @default(cuid())
  filename  String
  filepath  String
  filesize  Int
  mimetype  String
  createdAt DateTime @default(now())

  // Relations
  taskId     String
  task       Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("attachments")
}

model Activity {
  id        String       @id @default(cuid())
  type      ActivityType
  description String
  metadata  String?      // JSON string for additional data
  createdAt DateTime     @default(now())

  // Relations
  userId    String?
  user      User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId String?
  project   Project?     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  taskId    String?
  task      Task?        @relation(fields: [taskId], references: [id], onDelete: Cascade)
  clientId  String?
  client    Client?      @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@map("activities")
}

model Address {
  id          String   @id @default(cuid())
  street      String?
  city        String?
  state       String?
  postalCode  String?
  country     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  clientId    String   @unique
  client      Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@map("addresses")
}

// Enums
enum UserRole {
  ADMIN
  MANAGER
  USER
  VIEWER
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  DONE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ClientStatus {
  ACTIVE
  INACTIVE
  PROSPECT
  FORMER
}

enum ActivityType {
  TASK_CREATED
  TASK_UPDATED
  TASK_COMPLETED
  PROJECT_CREATED
  PROJECT_UPDATED
  CLIENT_ADDED
  COMMENT_ADDED
  FILE_UPLOADED
  MEETING_SCHEDULED
}
